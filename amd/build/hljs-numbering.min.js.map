{"version":3,"sources":["../src/hljs-numbering.js"],"names":["define","init","addStyles","initLineNumbersOnLoad","options","documentReady","lineNumbersBlock","lineNumbersValue","value","element","document","createElement","innerHTML","lineNumbersInternal","BREAK_LINE_REGEXP","isHljsLnCodeDescendant","domElt","curElt","className","indexOf","parentNode","getHljsLnTable","hljsLnDomElt","nodeName","edgeGetSelectedCodeLines","selection","selectionText","toString","tdAnchor","anchorNode","tdFocus","focusNode","firstLineNumber","parseInt","dataset","lineNumber","lastLineNumber","firstLineText","textContent","lastLineText","tmp","slice","lastIndexOf","selectedText","hljsLnTable","i","codeLineSel","format","codeLineElt","querySelector","css","type","getElementsByTagName","appendChild","blocks","querySelectorAll","hasOwnProperty","e","window","console","error","async","singleLine","firstLineIndex","duplicateMultilineNodes","addLineNumbersBlockFor","inputHtml","lines","getLines","length","trim","pop","html","l","nodes","childNodes","node","child","getLinesCount","duplicateMultilineNode","test","result","lineText","text","split","match","func","setTimeout","args","replace","m","n"],"mappings":"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","sourcesContent":["define(['filter_syntaxhighlighter/hljs'], function() {\n    // jshint multistr:true\n    return {\n        init: init,\n        initLineNumbersOnLoad: initLineNumbersOnLoad,\n        lineNumbersBlock: lineNumbersBlock,\n        lineNumbersValue: lineNumbersValue\n    };\n\n    var TABLE_NAME = 'hljs-ln',\n        LINE_NAME = 'hljs-ln-line',\n        CODE_BLOCK_NAME = 'hljs-ln-code',\n        NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',\n        NUMBER_LINE_NAME = 'hljs-ln-n',\n        DATA_ATTR_NAME = 'data-line-number',\n        BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\n\n    // if (hljs) {\n    //     hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\n    //     hljs.lineNumbersBlock = lineNumbersBlock;\n    //     hljs.lineNumbersValue = lineNumbersValue;\n\n    //     addStyles();\n    // } else {\n    //     window.console.error('highlight.js not detected!');\n    // }\n\n    /**\n     * init\n     */\n    function init() {\n        addStyles();\n    }\n\n    function isHljsLnCodeDescendant(domElt) {\n        var curElt = domElt;\n        while (curElt) {\n            if (curElt.className && curElt.className.indexOf('hljs-ln-code') !== -1) {\n                return true;\n            }\n            curElt = curElt.parentNode;\n        }\n        return false;\n    }\n\n    function getHljsLnTable(hljsLnDomElt) {\n        var curElt = hljsLnDomElt;\n        while (curElt.nodeName !== 'TABLE') {\n            curElt = curElt.parentNode;\n        }\n        return curElt;\n    }\n\n    // Function to workaround a copy issue with Microsoft Edge.\n    // Due to hljs-ln wrapping the lines of code inside a <table> element,\n    // itself wrapped inside a <pre> element, windowindow.getSelection().toString()\n    // does not contain any line breaks. So we need to get them back using the\n    // rendered code in the DOM as reference.\n    function edgeGetSelectedCodeLines(selection) {\n        // current selected text without line breaks\n        var selectionText = selection.toString();\n\n        // get the <td> element wrapping the first line of selected code\n        var tdAnchor = selection.anchorNode;\n        while (tdAnchor.nodeName !== 'TD') {\n            tdAnchor = tdAnchor.parentNode;\n        }\n\n        // get the <td> element wrapping the last line of selected code\n        var tdFocus = selection.focusNode;\n        while (tdFocus.nodeName !== 'TD') {\n            tdFocus = tdFocus.parentNode;\n        }\n\n        // extract line numbers\n        var firstLineNumber = parseInt(tdAnchor.dataset.lineNumber);\n        var lastLineNumber = parseInt(tdFocus.dataset.lineNumber);\n\n        // multi-lines copied case\n        if (firstLineNumber != lastLineNumber) {\n\n            var firstLineText = tdAnchor.textContent;\n            var lastLineText = tdFocus.textContent;\n\n            // if the selection was made backward, swap values\n            if (firstLineNumber > lastLineNumber) {\n                var tmp = firstLineNumber;\n                firstLineNumber = lastLineNumber;\n                lastLineNumber = tmp;\n                tmp = firstLineText;\n                firstLineText = lastLineText;\n                lastLineText = tmp;\n            }\n\n            // discard not copied characters in first line\n            while (selectionText.indexOf(firstLineText) !== 0) {\n                firstLineText = firstLineText.slice(1);\n            }\n\n            // discard not copied characters in last line\n            while (selectionText.lastIndexOf(lastLineText) === -1) {\n                lastLineText = lastLineText.slice(0, -1);\n            }\n\n            // reconstruct and return the real copied text\n            var selectedText = firstLineText;\n            var hljsLnTable = getHljsLnTable(tdAnchor);\n            for (var i = firstLineNumber + 1 ; i < lastLineNumber ; ++i) {\n                var codeLineSel = format('.{0}[{1}=\"{2}\"]', [CODE_BLOCK_NAME, DATA_ATTR_NAME, i]);\n                var codeLineElt = hljsLnTable.querySelector(codeLineSel);\n                selectedText += '\\n' + codeLineElt.textContent;\n            }\n            selectedText += '\\n' + lastLineText;\n            return selectedText;\n        // single copied line case\n        } else {\n            return selectionText;\n        }\n    }\n\n    // ensure consistent code copy/paste behavior across all browsers\n    // (see https://github.com/wcoder/highlightjs-line-numbers.js/issues/51)\n    document.addEventListener('copy', function(e) {\n        // get current selection\n        var selection = window.getSelection();\n        // override behavior when one wants to copy line of codes\n        if (isHljsLnCodeDescendant(selection.anchorNode)) {\n            var selectionText;\n            // workaround an issue with Microsoft Edge as copied line breaks\n            // are removed otherwise from the selection string\n            if (window.navigator.userAgent.indexOf(\"Edge\") !== -1) {\n                selectionText = edgeGetSelectedCodeLines(selection);\n            } else {\n                // other browsers can directly use the selection string\n                selectionText = selection.toString();\n            }\n            e.clipboardData.setData('text/plain', selectionText);\n            e.preventDefault();\n        }\n    });\n\n    function addStyles () {\n        var css = document.createElement('style');\n        css.type = 'text/css';\n        css.innerHTML = format(\n            '.{0}{border-collapse:collapse}' +\n            '.{0} td{padding:0}' +\n            '.{1}:before{content:attr({2})}',\n        [\n            TABLE_NAME,\n            NUMBER_LINE_NAME,\n            DATA_ATTR_NAME\n        ]);\n        document.getElementsByTagName('head')[0].appendChild(css);\n    }\n\n    function initLineNumbersOnLoad (options) {\n        documentReady(options);\n        // if (document.readyState === 'interactive' || document.readyState === 'complete') {\n        //     documentReady(options);\n        // } else {\n        //     window.addEventListener('DOMContentLoaded', function () {\n        //         documentReady(options);\n        //     });\n        // }\n    }\n\n    function documentReady (options) {\n        try {\n            var blocks = document.querySelectorAll('code.hljs,code.nohighlight');\n\n            for (var i in blocks) {\n                if (blocks.hasOwnProperty(i)) {\n                    lineNumbersBlock(blocks[i], options);\n                }\n            }\n        } catch (e) {\n            window.console.error('LineNumbers error: ', e);\n        }\n    }\n\n    function lineNumbersBlock (element, options) {\n        if (typeof element !== 'object') {\n            return;\n        }\n\n        async(function () {\n            element.innerHTML = lineNumbersInternal(element, options);\n        });\n    }\n\n    function lineNumbersValue (value, options) {\n        if (typeof value !== 'string') {\n            return;\n        }\n\n        var element = document.createElement('code');\n        element.innerHTML = value;\n\n        return lineNumbersInternal(element, options);\n    }\n\n    function lineNumbersInternal (element, options) {\n        // define options or set default\n        options = options || {\n            singleLine: false\n        };\n\n        // convert options\n        var firstLineIndex = !options.singleLine ? 0 : 1;\n\n        duplicateMultilineNodes(element);\n\n        return addLineNumbersBlockFor(element.innerHTML, firstLineIndex);\n    }\n\n    function addLineNumbersBlockFor (inputHtml, firstLineIndex) {\n\n        var lines = getLines(inputHtml);\n\n        // if last line contains only carriage return remove it\n        if (lines[lines.length-1].trim() === '') {\n            lines.pop();\n        }\n\n        if (lines.length > firstLineIndex) {\n            var html = '';\n\n            for (var i = 0, l = lines.length; i < l; i++) {\n                html += format(\n                    '<tr>' +\n                        '<td class=\"{0} {1}\" {3}=\"{5}\">' +\n                            '<div class=\"{2}\" {3}=\"{5}\"></div>' +\n                        '</td>' +\n                        '<td class=\"{0} {4}\" {3}=\"{5}\">' +\n                            '{6}' +\n                        '</td>' +\n                    '</tr>',\n                [\n                    LINE_NAME,\n                    NUMBERS_BLOCK_NAME,\n                    NUMBER_LINE_NAME,\n                    DATA_ATTR_NAME,\n                    CODE_BLOCK_NAME,\n                    i + 1,\n                    lines[i].length > 0 ? lines[i] : ' '\n                ]);\n            }\n\n            return format('<table class=\"{0}\">{1}</table>', [ TABLE_NAME, html ]);\n        }\n\n        return inputHtml;\n    }\n\n    /**\n     * Recursive method for fix multi-line elements implementation in highlight.js\n     * Doing deep passage on child nodes.\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNodes (element) {\n        var nodes = element.childNodes;\n        for (var node in nodes) {\n            if (nodes.hasOwnProperty(node)) {\n                var child = nodes[node];\n                if (getLinesCount(child.textContent) > 0) {\n                    if (child.childNodes.length > 0) {\n                        duplicateMultilineNodes(child);\n                    } else {\n                        duplicateMultilineNode(child.parentNode);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method for fix multi-line elements implementation in highlight.js\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNode (element) {\n        var className = element.className;\n\n        if ( ! /hljs-/.test(className)) {\n            return;\n        }\n\n        var lines = getLines(element.innerHTML);\n\n        for (var i = 0, result = ''; i < lines.length; i++) {\n            var lineText = lines[i].length > 0 ? lines[i] : ' ';\n            result += format('<span class=\"{0}\">{1}</span>\\n', [ className,  lineText ]);\n        }\n\n        element.innerHTML = result.trim();\n    }\n\n    function getLines (text) {\n        if (text.length === 0) {\n            return [];\n        }\n        return text.split(BREAK_LINE_REGEXP);\n    }\n\n    function getLinesCount (text) {\n        return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\n    }\n\n    function async (func) {\n        window.setTimeout(func, 0);\n    }\n\n    /**\n     * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\n     * @param {string} format\n     * @param {array} args\n     */\n    function format (format, args) {\n        return format.replace(/\\{(\\d+)\\}/g, function(m, n){\n            return args[n] ? args[n] : m;\n        });\n    }\n});"],"file":"hljs-numbering.min.js"}